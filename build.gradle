def versionMajor = 0
def versionMinor = 5
def versionUpdate = 0
def versionPatch = 2

// Build params
def projectApplicationId = 'com.sudox.android'
def projectBuildToolsVersion = '28.0.3'
def compileSdkProjectVersion = 28
def minSdkProjectVersion = 21

buildscript {
    ext.kotlinVersion = '1.3.21'

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlinVersion"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

subprojects { subproject ->
    if (subproject.name != 'app') {
        apply plugin: 'com.android.library'
    } else {
        apply plugin: 'com.android.application'
    }

    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'
    apply plugin: 'kotlin-platform-android'
    apply plugin: 'kotlin-kapt'

    android {
        compileSdkVersion compileSdkProjectVersion
        buildToolsVersion projectBuildToolsVersion

        defaultConfig {
            minSdkVersion minSdkProjectVersion
            targetSdkVersion compileSdkProjectVersion
            versionCode versionMajor * 1000 + versionMinor * 100 + versionUpdate * 10 + versionPatch
            versionName "${versionMajor}.${versionMinor}.${versionUpdate}.${versionPatch}"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

            if (name == 'app') {
                applicationId projectApplicationId
            }
        }

        lintOptions {
            checkReleaseBuilds false
            // Or, if you prefer, you can continue to check for errors in release builds,
            // but continue the build even when errors are found:
            abortOnError false
        }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.27.0-eap13'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:0.27.0-eap13'

        // For testing
        testImplementation 'junit:junit:4.12'
        testImplementation 'org.mockito:mockito-core:2.25.1'
        testImplementation 'org.powermock:powermock-module-junit4:2.0.0-RC.1'
        testImplementation 'org.powermock:powermock-api-mockito2:2.0.0'
        androidTestImplementation 'junit:junit:4.12'
        androidTestImplementation 'org.mockito:mockito-core:2.25.1'
        androidTestImplementation 'org.mockito:mockito-android:2.25.1'
        androidTestImplementation 'com.android.support:support-annotations:28.0.0'
        androidTestImplementation 'com.android.support.test:runner:1.0.2'
        androidTestImplementation 'com.android.support.test:rules:1.0.2'
        androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
        androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
    }

    kapt {
        mapDiagnosticLocations true
        useBuildCache true
        generateStubs true
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
