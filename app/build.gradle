apply plugin: 'com.android.application'
apply plugin: 'kotlin-platform-android'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'

// App version
def versionMajor = 0
def versionMinor = 1
def versionPatch = 0

// App build params
def buildToolsProjectVersion = "28.0.1"
def compileSdkProjectVersion = 28
def minSdkProjectVersion = 21

// Versions of libraries
ext {
    appCompatVersion = "1.0.0-rc01"
    v4SupportVersion = "28.0.0-alpha3"
    designVersion = "27.1.1"
    architectureComponentsVersion = "1.1.1"
    daggerVersion = "2.16"
    firebaseVersion = "16.0.1"
    socketVersion = "1.0.0"
    timberVersion = "4.7.1"
    rxKotlinVersion = "2.2.0"
    rxAndroidVersion = "2.0.2"
    rxJavaVersion = "2.1.16"
    junitVersion = "4.12"
    runnerVersion = "1.1.0-alpha4"
    espressoVersion = "3.1.0-alpha4"
    mockitoVersion = "2.19.1"
    lottieVersion = "2.5.5"
    leakcanaryVersion = "1.6.1"
    circleImageViewVersion = "2.2.0"
    glideVersion = "4.7.1"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Google support libraries
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "com.android.support:support-v4:$v4SupportVersion"
    implementation "com.android.support:design:$designVersion"

    // Architecture components

        // ViewModel, LiveData
        implementation "android.arch.lifecycle:extensions:$architectureComponentsVersion"

        // Room
        implementation "android.arch.persistence.room:runtime:$architectureComponentsVersion"
        kapt "android.arch.persistence.room:compiler:$architectureComponentsVersion"

    // Dagger
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    // Firebase
    implementation "com.google.firebase:firebase-crash:$firebaseVersion"

    implementation 'com.androidadvance:topsnackbar:1.1.1'

    // Socket.io
    implementation "io.socket:socket.io-client:$socketVersion"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.25.0'

    //Firebase
    implementation 'com.google.firebase:firebase-core:16.0.1'

    // Timber
    implementation "com.jakewharton.timber:timber:$timberVersion"

    // Fresco
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    // Lottie
    implementation "com.airbnb.android:lottie:$lottieVersion"

    // Design libraries
    implementation "de.hdodenhof:circleimageview:$circleImageViewVersion"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanaryVersion"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:$leakcanaryVersion"

    // Testing libraries
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    androidTestImplementation "androidx.test:runner:$runnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
}

android {
    compileSdkVersion compileSdkProjectVersion
    buildToolsVersion buildToolsProjectVersion

    testOptions {
        androidExtensions {
            experimental = true
            defaultCacheImplementation = "NONE"
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    defaultConfig {
        applicationId "com.sudox.android"
        minSdkVersion minSdkProjectVersion
        targetSdkVersion compileSdkProjectVersion
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        // Runner for instrumental tests
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            renderscriptOptimLevel = 0
        }
    }
}

kapt {
    mapDiagnosticLocations = true
    generateStubs true
}

kotlin {
    experimental {
        coroutines "enable"
    }
}
